* Initial File and Variable Creation
** Create custom.el
Emacs customizations are here stored in a file called custom.el in
your emacs user directory.  The following snippet creates the file if
it doesn't exist and points the customizations to that file.  It also
defines the variable custom-file-path, that holds the complete path to
the file.

#+BEGIN_SRC emacs-lisp
  (defvar custom-file-path)
  (setq custom-file-path (concat user-emacs-directory "custom.el"))
  (unless (file-exists-p custom-file-path)
    (write-region "" nil custom-file-path))
#+END_SRC

** Backup and Auto-save Directories
Create these directories, used later, to store backups and auto-saves.

#+BEGIN_SRC emacs-lisp
  ;; Backups Directory.
  (defvar backup-file-directory)
  (setq backup-file-directory
        (expand-file-name "backups" user-emacs-directory))
  (unless (file-exists-p backup-file-directory)
    (make-directory backup-file-directory))

  ;; Auto-save Directory
  (defvar autosave-file-directory)
  (setq autosave-file-directory
        (expand-file-name "autosaves/" user-emacs-directory))
  (unless (file-exists-p autosave-file-directory)
    (make-directory autosave-file-directory))
#+END_SRC

* General Defaults
Some sane defaults taken mainly from [[https://github.com/durantschoon/.emacs.d][here]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html#org7b1ada1][here]].
** Emacs Customizations
Store them in custom.el file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file custom-file-path)
#+END_SRC

** Y or N Should be Enough!

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Backups and Autosaves
This keeps all backups in the 'backups' directory of your emacs user
directory.  Autosave files are stored in the 'autosaves' directory. We
keep all files, you never know.

#+BEGIN_SRC emacs-lisp
  ;; Backup Directory.
  (setq backup-directory-alist `(("." . ,backup-file-directory)))

  ;; Autosave Directory.
  (setq auto-save-file-name-transforms `((".*" ,autosave-file-directory t)))
#+END_SRC

** Deletion
Delete region when typing, please!.

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)

  ;; C-k kills the whole line.
  (global-set-key "\C-k" 'kill-whole-line)

  ;; C-Ã± kill the rest of the line.
  (global-set-key "\M-k" 'kill-line)
#+END_SRC

* Convenience Macros and Functions
** Navigation
These functions are for faster navigation between and within windows.
*** Interchange buffers
#+BEGIN_SRC emacs-lisp
  ;; Switch buffer with buffer below this one.
  (defun switch-buffer-with-lower ()
    (interactive)
    (setq tb (buffer-name))
    (windmove-down)
    (setq bb (buffer-name))
    (switch-to-buffer tb)
    (windmove-up)
    (switch-to-buffer bb)
    )

  ;; Switch buffer with buffer above this one.
  (defun switch-buffer-with-upper ()
    (interactive)
    (setq bb (buffer-name))
    (windmove-up)
    (setq tb (buffer-name))
    (switch-to-buffer bb)
    (windmove-down)
    (switch-to-buffer tb)
    )

  ;; Switch buffer with buffer to right of this one.
  (defun switch-buffer-with-right ()
    (interactive)
    (setq lb (buffer-name))
    (windmove-right)
    (setq rb (buffer-name))
    (switch-to-buffer lb)
    (windmove-left)
    (switch-to-buffer rb)
    )

  ;; Switch buffer with buffer to left of this one.
  (defun switch-buffer-with-left ()
    (interactive)
    (setq rb (buffer-name))
    (windmove-left)
    (setq lb (buffer-name))
    (switch-to-buffer rb)
    (windmove-right)
    (switch-to-buffer lb)
    )

  ;; -- Swap buffers (up-down / left-right)
  (global-set-key (kbd "C-c <up>") 'switch-buffer-with-upper)
  (global-set-key (kbd "C-c <right>") 'switch-buffer-with-right)
  (global-set-key (kbd "C-c <down>") 'switch-buffer-with-lower)
  (global-set-key (kbd "C-c <left>") 'switch-buffer-with-left)
#+END_SRC
*** Move between buffers
#+BEGIN_SRC emacs-lisp
  ;; -- Navigation
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
#+END_SRC
** Window manipulation
#+BEGIN_SRC emacs-lisp
  ;; -- Window size.
  (global-set-key (kbd "C-{") 'shrink-window-horizontally)
  (global-set-key (kbd "C-}") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-'") 'shrink-window)
  (global-set-key (kbd "C-+") 'enlarge-window)

  ;;---------
  ;; Font size
  ;;---------
  (define-key global-map (kbd "<f5>")
    (lambda () (interactive) (text-scale-decrease 1)))
  (define-key global-map (kbd "<f6>")
    (lambda () (interactive) (text-scale-increase 1)))

  ;;---------
  ;; Background color
  ;;---------
  ;; This is thought to be used when using emacs in terminal mode.
  (defun set-nw-emacs-style ()
    (interactive)
    (set-face-background 'default "#000000")
    (set-frame-parameter nil 'background-mode "dark"))
#+END_SRC
** Editing
The following functions make editing a bit easier and faster. Key
bindings are setup on the spot.
*** indent-buffer
Re-indent the whole buffer. The actual effect depends on the current
mode.  Bound to <C-tab>.

Taken from [[https://www.emacswiki.org/emacs/ReformatBuffer][emacswiki]].

#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)))
  (global-set-key [C-tab] 'indent-buffer)
#+END_SRC
 
*** move-line-down / move-line-up
Moves the current line down or up one position, switching places with
the one below or above, respectively.  Bound to M-S-down and M-S-up.
Some major or minor modes may have another meaning assigned to this
key combination.

Taken from [[http://whattheemacsd.com][whattheemacsd.com]].

#+BEGIN_SRC emacs-lisp
  (defun move-line-down ()
    (interactive)
    (let ((col (current-column)))
      (forward-line)
      (transpose-lines 1)
      (forward-line -1)
      (move-to-column col)))
  (global-set-key [M-S-down] 'move-line-down)

  (defun move-line-up ()
    (interactive)
    (let ((col (current-column)))
      (transpose-lines 1)
      (forward-line -2)
      (move-to-column col)))
  (global-set-key [M-S-up] 'move-line-up)
#+END_SRC

*** open-line-below / open-line-above
Opens a new line below or above the current one, and sets the point at
the indent position, independently if where the point originally was.

Taken from [[http://whattheemacsd.com][whattheemacsd.com]].

#+BEGIN_SRC emacs-lisp
  (defun open-line-below ()
    (interactive)
    (end-of-line)
    (newline)
    (indent-for-tab-command))
  (global-set-key [C-return] 'open-line-below)

  (defun open-line-above ()
    (interactive)
    (beginning-of-line)
    (newline)
    (forward-line -1)
    (indent-for-tab-command))
  (global-set-key [C-S-return] 'open-line-above)
#+END_SRC
* Dired
Dired deserves a chapter on its own. We use use-package to optimize
the different customizations made.
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :bind (:map dired-mode-map
                ("V" . open-file-from-dired)
                ("{" . dired-toggle-listing-switches)
                ("<backspace>" . go-up-level-dired)
                ("M-<" . dired-back-to-top)
                ("C-<" . dired-jump-to-bottom))
    :config
    ;;----------------------------------------------------------------
    ;; chiri-trunc-lines - truncates buffer's lines.
    ;; ---------------------------------------------------------------
    (defun chiri-trunc-lines ()
      (setq truncate-lines t))

    ;; ---------------------------------------------------------------
    ;; dired-back-to-top - takes point to first file in a Dired
    ;; buffer.  (taken from whattheemacsd.com)
    ;; ---------------------------------------------------------------
    (defun dired-back-to-top ()
      (interactive)
      (beginning-of-buffer)
      (dired-next-line 2))

    ;;----------------------------------------------------------------
    ;; dired-jump-to-bottom - takes point to last file in a Dired
    ;; buffer.
    ;; (taken from whattheemacsd.com)
    ;; ---------------------------------------------------------------
    (defun dired-jump-to-bottom ()
      (interactive)
      (end-of-buffer)
      (dired-next-line -1))

    ;; Toggle dired list switches between -la and -l.
    (defun dired-toggle-listing-switches ()
      (interactive)
      (if (string= dired-listing-switches "-l --group-directories-first")
          (setq dired-listing-switches "-lA --group-directories-first")
        (setq dired-listing-switches "-l --group-directories-first"))
      (setq tmp-curr-dir default-directory)
      (kill-buffer)
      (dired tmp-curr-dir))

    ;;------------------------------------------------------------------------------
    ;; open-file-from-dired - open file with default viewer from Dired.
    ;;------------------------------------------------------------------------------
    (defun open-file-from-dired ()
      "In dired, open the file named on this line with default viewer."
      (interactive)
      (let* ((file (dired-get-filename nil t)))
        (message "Opening %s..." file)
        (call-process "xdg-open" nil 0 nil file)
        (message "Opening %s done" file)))

    ;;----------
    ;; Go up a level
    ;;----------
    (defun go-up-level-dired ()
      (interactive)
      (find-alternate-file ".."))

    (add-hook 'dired-mode-hook 'chiri-trunc-lines))
#+END_SRC
* IDO
Ido is heavily used so I would rather leave its configuration here in
a seperate entry.  This also includes ido-vertical and Smex.

Configure IDO.
#+BEGIN_SRC emacs-lisp
  (setq ido-auto-merge-delay-time 1)
  (setq ido-completion-buffer-all-completions t)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (setq ido-ignore-buffers (quote ("\\` " "tasks2.org" "diary")))
  (setq ido-max-prospects 30)
  (face-spec-set 'ido-only-match
                 '((t (:foreground "chartreuse")))
                 'face-override-spec)
  (face-spec-set 'ido-subdir
                 '((t (:foreground "turquoise")))
                 'face-override-spec)
  (ido-mode 'both)
#+END_SRC
Enable Smex.
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :bind (("M-x" . smex)))
#+END_SRC

Enable Ido Vertical.
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys (quote C-n-C-p-up-and-down))
    (setq ido-vertical-pad-list nil)
    (setq ido-vertical-show-count t))
#+END_SRC
* Org-Mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :defer
    :bind (("C-c a" . org-agenda)
           ("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c t" . capture-todo-org)
           ("C-c d" . chiri-insert-log-date)
           ("C-c m" . chiri-insert-log-month)
           ("C-c e" . chiri-insert-log-entry)
           ("C-c s" . chiri-insert-log-self-esteem))
    :config
    ;;----------------------------------------------------------------
    ;; chiri-insert-log-month - Inserts a new log entry month
    ;; ---------------------------------------------------------------
    (defun chiri-insert-log-month ()
      (interactive)
      (insert "** " (capitalize (format-time-string "%Y-%m %B")))
      )
    ;;----------------------------------------------------------------
    ;; chiri-insert-log-date - Inserts a new log entry date
    ;; ---------------------------------------------------------------
    (defun chiri-insert-log-date ()
      (interactive)
      (insert "*** " (capitalize (format-time-string "%Y-%m-%d %A")))
      )
    ;;----------------------------------------------------------------
    ;; chiri-insert-new-log-entry - Inserts a new log entry with needed
    ;; elements
    ;; ----------------------------------------------------------------
    (defun chiri-insert-log-entry ()
      (interactive)
      (progn
        (goto-char (point-min))
        (if (search-forward (capitalize (format-time-string "* %Y")) nil t)
            (if (search-forward (capitalize (format-time-string "** %Y-%m %B")) nil t)
                (if (search-forward (capitalize (format-time-string "*** %Y-%m-%d %A")) nil t)
                    (progn
                      (goto-char (point-max))
                      (insert "\n-----\n"))
                  (goto-char (point-max))
                  (insert "\n*** " (capitalize (format-time-string "%Y-%m-%d %A\n")))
                  )
              (goto-char (point-max))
              (insert "\n** " (capitalize (format-time-string "%Y-%m %B")))
              (insert "\n*** " (capitalize (format-time-string "%Y-%m-%d %A\n")))
              )
          (goto-char (point-max))
          (insert "\n* " (capitalize (format-time-string "%Y")))
          (insert "\n** " (capitalize (format-time-string "%Y-%m %B")))
          (insert "\n*** " (capitalize (format-time-string "%Y-%m-%d %A\n")))
          )
        )
      )
    ;;----------------------------------------------------------------
    ;; chiri-insert-log-self-esteem - Inserts a new log self-esteem entry
    ;; ---------------------------------------------------------------
    (defun chiri-insert-log-self-esteem ()
      (interactive)
      (progn
        (goto-char (point-max))
        (insert "**** Outstanding thoughts\n")
        (insert "***** Outstanding positive thoughts\n")
        (insert "***** Outstanding negative thoughts\n")
        (insert "**** My story\n")
        (insert "***** What it is\n")
        (insert "***** Where does this come from?\n")
        (insert "**** Assessment\n")
        (insert "***** Three positive things about myself\n")
        (insert "***** Three negative things about myself\n")
        (insert "**** Affirm: it's ok for me to be me, I need not be anyone else\n")
        (insert "**** Forgiveness\n")
        (insert "***** Who have I hurt?\n")
        (insert "***** Who has hurt me?\n")
        (insert "***** How have I hurt myself?\n")
        ))
    ;;---
    ;;
    ;;---
    (defun capture-todo-org ()
      (interactive)
      (org-capture nil "t"))
    (setq org-default-notes-file "~/.chiri/tasks2.org")
    (setq org-capture-templates
          '(
            ("t" "Todo Tasks" entry (file+headline "~/.chiri/tasks2.org" "Tasks")
             "* %? %^G
  %T"))))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("M-g s" . magit-status)
    :config
    ;;------------------------------------------------------------------------------
    ;; magit-status - opens magit status window as the only window in frame.
    ;; (taken from whattheemacsd.com)
    ;;------------------------------------------------------------------------------
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))

    ;;------------------------------------------------------------------------------
    ;; magit-quit-window - closes the magit status window and restores window
    ;; configuration.
    ;; (taken from whattheemacsd.com)
    ;;------------------------------------------------------------------------------
    (defadvice magit-quit-window (around magit-restore-screen activate)
      ad-do-it
      (jump-to-register :magit-fullscreen)))

#+END_SRC

* Rest I - To be Organized
#+BEGIN_SRC emacs-lisp
  ;;------------------------------------------------------------------------------
  ;; doom-themes - opinionated UI plugin and pack of themes.
  ;;------------------------------------------------------------------------------
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t))

  ;;------------------------------------------------------------------------------
  ;; doom-modeline - A fancy and fast mode-line inspired by minimalism design.
  ;;------------------------------------------------------------------------------
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1)
    (display-time-mode -1)
    (line-number-mode -1)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-enable-word-count t)
    (doom-modeline-icon t)
    (doom-modeline-minor-modes t)
    (mode-line-percent-position "%o"))


  ;;-----------------------------------------------------------------------------
  ;; Spelling
  ;;------------------------------------------------------------------------------
  (use-package ispell
    :init
    (setenv "LANG" "en_US")
    :custom
    (setq ispell-program-name "hunspell")
    (setq ispell-local-dictionary "es_CL")
    :config
    (ispell-set-spellchecker-params))
  
  (use-package flyspell
    :custom
    (flyspell-issue-message-flag nil)
    (flyspell-sort-corrections nil))

  ;;------------------------------------------------------------------------------
  ;; avy - package for jumping to visible text using a char-based decision tree.
  ;;-----------------------------------------------------------------------------
  (use-package avy
    :ensure t
    :bind ("C-." . 'avy-goto-char-timer))

  ;;------------------------------------------------------------------------------
  ;; ch-flyspell-correct-buffer - Jumps to each mispelled word in buffer from
  ;;                            beginning.
  ;;------------------------------------------------------------------------------
  (defun ch-flyspell-correct-buffer ()
    (interactive)
    (save-excursion
      (beginning-of-buffer)
      (setq current-prefix-arg '(4))
      (call-interactively 'flyspell-correct-next)
      (goto-char cp)))

  (use-package flyspell-correct
    :ensure t
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . ch-flyspell-correct-buffer)))

  (use-package flyspell-correct-avy-menu
    :ensure t
    :after flyspell-correct)

  ;;------------------------------------------------------------------------------
  ;; org-bullets - make it nice again.
  ;;------------------------------------------------------------------------------
  (use-package org-bullets
    :defer
    :config
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))


  ;;--- PYTHON -------------------------------------------------------------------
  ;;------------------------------------------------------------------------------
  ;; python - python's flying circus support for Emacs.
  ;;------------------------------------------------------------------------------
  (use-package python
    :defer
    :config
    (add-hook 'python-mode-hook
              (lambda () (interactive)
                (linum-mode t))))

  (use-package py-autopep8
    :ensure t
    :defer)

  ;;------------------------------------------------------------------------------
  ;; python-django - a Jazzy package for managing Django projects.
  ;;------------------------------------------------------------------------------
                                          ;(use-package python-django
                                          ;  :load-path "~/.emacs.d/python-django"
                                          ;  :bind ("C-x j" . python-django-open-project))

  ;;------------------------------------------------------------------------------
  ;; elpy - python IDE
  ;;------------------------------------------------------------------------------
  (use-package elpy
    :ensure t
    :defer
    :init
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
    (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
    :config
    (elpy-enable)
    :diminish elpy-mode)



  ;;--- HTML/CSS/JS --------------------------------------------------------------
  ;;------------------------------------------------------------------------------
  ;; web-mode - web template editing mode for Emacs.
  ;;------------------------------------------------------------------------------
  (use-package web-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.scss?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.xml?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-hook 'web-mode-hook
              (lambda()
                (company-mode)
                (electric-indent-local-mode t)
                (local-set-key (kbd "RET")
                               'electric-newline-and-maybe-indent)))
    :config
    (setq web-mode-engines-alist '(("django"    . "\\.html\\'")))
    (add-hook 'web-mode-hook 'emmet-mode)
    :bind
    ("M-RET" . open-line-below))

  ;;------------------------------------------------------------------------------
  ;; company-web - company mode for web mode.
  ;;------------------------------------------------------------------------------
  (use-package company-web
    :ensure t
    :defer
    :config
    (require 'company-web-html)
    (add-to-list 'company-backends 'company-web-html))

  ;;------------------------------------------------------------------------------
  ;; flycheck - syntax checking for GNU Emacs
  ;;------------------------------------------------------------------------------
  (use-package flycheck
    :ensure t
    :defer
    :config
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode)
    :diminish flycheck-mode)

  ;;------------------------------------------------------------------------------
  ;; yasnippet - a template system for Emacs.
  ;;------------------------------------------------------------------------------
  (use-package yasnippet
    :ensure t
    :commands (yas-reload-all yas-minor-mode)
    :init
    (add-hook 'gdscript-mode-hook (lambda() (yas-reload-all) (yas-minor-mode)))
    )

  (use-package yasnippet-snippets
    :ensure t)

  ;;------------------------------------------------------------------------------
  ;; whitespace - minor mode to visualize TAB, (HARD) SPACE, NEWLINE.
  ;;------------------------------------------------------------------------------
  (use-package whitespace
    :init
    (customize-set-variable 'whitespace-line '((t (:background "dark red"))))
    (customize-set-variable 'whitespace-line-column 80)
    :bind
    ("C-x w" . whitespace-mode)
    :diminish whitespace-mode)

  ;; Set spaces instead of tabs.
  (setq-default indent-tabs-mode nil)
#+END_SRC

* Emacs Customizations
Loads the emacs customizations from the configured file.

#+BEGIN_SRC emacs-lisp
(load-file custom-file)
#+END_SRC

* Rest II - To be Organized
#+BEGIN_SRC emacs-lisp
  ;; Setup linum-mode
  (setq linum-format "%4d")
  (global-set-key (kbd "<f7>") 'linum-mode)

  ;; Keybindings for custom macros and functions.
  ;; Collapse next line onto current.
  (global-set-key (kbd "M-DEL")
                  (lambda ()
                    (interactive)
                    (join-line -1)))
  (global-set-key (kbd "<M-S-down>") 'move-line-down)
  (global-set-key (kbd "<M-S-up>") 'move-line-up)
  (global-set-key (kbd "<C-return>") 'open-line-below)
  (global-set-key (kbd "<C-S-return>") 'open-line-above)

  ;; Activate company-mode everywhere.
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
** 
